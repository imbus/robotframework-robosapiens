#!csharp

#r "lib\sapfewse.dll"
using sapfewse;

#!csharp

using System.Linq;
using System.Collections.Generic;

#!csharp

// Disable the warning for CS8524 (a value not defined in the enum was not considered)
// https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-files

public enum ComponentT {
    GuiLabel,
    GuiTextField,
    GuiCTextField,
    GuiPasswordField,
    GuiButton,
    GuiCheckbox,
    GuiRadioButton    
}

public enum TableItemT {
    GuiTextField,
    GuiButton,
    GuiCheckbox,
    GuiRadioButton
}

public enum TreeItemT {
    Text,
    Button,
    Checkbox,
    Link
}

public enum GridViewItemT {
    Text,
    Button,
    Checkbox
}


public enum Label {
    GuiLabel,
    GuiTextField
}

public enum RadioButton {
    GuiRadioButton
}

public enum CheckBox {
    GuiCheckbox
}

public bool isLabel(GuiComponentType type) {
    return type == GuiComponentType.GuiLabel ||
           type == GuiComponentType.GuiTextField;
}

public bool isTextField(GuiComponentType type) {
    return type == GuiComponentType.GuiTextField ||
           type == GuiComponentType.GuiCTextField ||
           type == GuiComponentType.GuiPasswordField;
    // filter the component list using these types
    // e.g. where isTextField(component.type)
}

#!csharp

public abstract record Locator {}

public record HLabel(string label): Locator;
public record HLabelVLabel(string hLabel, string vLabel): Locator;
public record HLabelVIndex(string hLabel, int vIndex): Locator;
public record HIndexVLabel(int hIndex, string vLabel): Locator;

public abstract record TableLocator: Locator {}
public record ColRowIdx(string column, int rowIdx): TableLocator;
public record ColRowLabel(string column, string rowLabel): TableLocator;

// Gui Tables
// These are used to store components while traversing the component tree of a window
// Each table contains components with the same "SAP coordinates"

public abstract class GuiTable<T> {
    protected List<T> records = new List<T>();

    public void add(T record) {
        records.Add(record);
    }
}

public abstract class TextField {
    public abstract void fill(string text);
    public abstract void select();
}

public class SAPTextField: TextField {
    GuiTextField textField;

    public SAPTextField(string id, GuiSession session) {
        textField = (GuiTextField)session.FindById(id);
    }

    public override void fill(string text) {
        textField.Text = text;
    }

    public override void select() {
        textField.SetFocus();
    }
}

public class GridViewTextField: TextField {
    GuiGridView gridView;
    int rowIdx;
    string columnId;

    public GridViewTextField(string gridViewId, int rowIdx, string columnId, GuiSession session) {
        gridView = (GuiGridView)session.FindById(gridViewId);
        this.rowIdx = rowIdx;
        this.columnId = columnId;
    }

    public override void fill(string text) {
        gridView.ModifyCell(rowIdx, columnId, text);
    }

    public override void select() {
        gridView.Click(rowIdx, columnId);
    }
}

// Any text that the user cannot change is considered a Label
// including links in a tree and non-editable text fields
public abstract class Label {
    public abstract void click();
    public abstract string read();
}

public class SAPLabel: Label {
    GuiLabel label;

    public SAPLabel(string id, GuiSession session) {
        label = (GuiLabel)session.FindById(id);
    }

    public override void click() {
        label.SetFocus();
    }

    public override string read() {
        return label.Text;
    }
}

public abstract class CheckBox {
    public abstract void toggle();
}

public abstract class Button {
    public abstract void click();
}

public abstract class RadioButton {
    public abstract void select();
}

public abstract class ComboBox {
    public abstract void select(string option);
}

public class SAPComboBox: ComboBox {
    GuiComboBox comboBox;

    public SAPComboBox(string id, GuiSession session) {
        comboBox = (GuiComboBox)session.FindById(id);
    }

    public override void select(string option) {
        // find the key corresponding to the selection and set it as current key

        comboBox.Key = option;
    }
}

public class SAPTab {
    GuiTab tab;

    public SAPTab(string id, GuiSession session) {
        tab = (GuiTab)session.FindById(id);
    }

    public void select() {
        tab.Select();
    }
}

public class TabTable: GuiTable<Tab> {
    public SAPTab? findTab(string text, GuiSession session) {
        var tab = records.Where(rec => rec.text == text).FirstOrDefault();

        return tab switch {
            Tab => new SAPTab(tab.id, session),
            _ => null
        };
    }
}

public class ComponentTable: GuiTable<Component> {
    public Component? findByText(string text, GuiComponentType type, bool changeable) {
        return records.Where(rec => 
            rec.type == type && 
            rec.changeable == changeable && 
            rec.text.Equals(text) || rec.text.StartsWith(text)
        ).FirstOrDefault();
    }

    public Component? findByLabel(string label, GuiComponentType type, bool changeable) {
        return records.Where(rec => 
            rec.type == type && 
            rec.changeable == changeable && 
            rec.labels.Contains(label) || rec.labels.Any(l => l.StartsWith(label))
        ).FirstOrDefault();
    }

    public Component? findClosestVertical(string label, BoundingBox boundingBox, GuiComponentType type, bool changeable) {
        return records.Where(rec => 
            rec.type == type && 
            rec.changeable == changeable && 
            rec.boundingBox.isClosestVerticalTo(boundingBox) &&
            rec.labels.Contains(label) || rec.labels.Any(l => l.StartsWith(label))
        ).FirstOrDefault();
    }

    public Component? findClosestHorizontal(string label, BoundingBox boundingBox, GuiComponentType type, bool changeable) {
        return records.Where(rec => 
            rec.type == type && 
            rec.changeable == changeable && 
            rec.boundingBox.isClosestHorizontalTo(boundingBox) &&
            rec.labels.Contains(label) || rec.labels.Any(l => l.StartsWith(label))
        ).FirstOrDefault();
    }

    public Component? findInsideBox(string label, BoundingBox boxBoundingBox, GuiComponentType type, bool changeable) {
        return records.Where(rec => 
            rec.type == type && 
            rec.changeable == changeable && 
            rec.boundingBox.isContainedIn(boxBoundingBox) &&
            rec.labels.Contains(label) || rec.labels.Any(l => l.StartsWith(label))
        ).FirstOrDefault();
    }

     // add support for the syntax Label 1 >> Label 2
}

public class GridViewItemTable: GuiTable<GridViewItem> {
    public TextField? findTextField(Locator locator, bool changeable, GuiSession session) {
        return records.Where(r =>
            r.type == GridViewItemT.Text &&
            r.changeable == changeable
        ).FirstOrDefault()?.toTextField();
    }

    public ComboBox? findComboBox(Locator locator, GuiSession session) {
        return null;
    }
}

public class TableItemTable: GuiTable<TableItem> {
    public TableItem? findByColumnRowIdx(string column, int rowIdx, GuiComponentType type, GuiSession session) {
        return records.Where(r =>
            r.type == type && r.column == column && r.rowIndex == rowIdx
        ).FirstOrDefault();
    }

    public TableItem? findByColumnRowLabel(string column, string rowLabel, GuiComponentType type, GuiSession session) {
        return records.Where(r =>
            r.type == type && r.column == column && r.rowIndex == rowIdx
        ).FirstOrDefault();
    }
}

public class TreeItemTable: GuiTable<TreeItem> {
}

public class ComboBoxTable: GuiTable<ComboBoxRecord> {
    public ComboBox? findComboBox(string label, GuiSession session) {
        return new SAPComboBox("123123", session);
    }
}

public class ComponentsDB {
    ComponentTable components = new ComponentTable();
    GridViewItemTable gridViewItems = new GridViewItemTable();
    TableItemTable tableItems = new TableItemTable();
    TreeItemTable treeItems = new TreeItemTable();
    ComboBoxTable comboBoxes = new ComboBoxTable();
    TabTable tabs = new TabTable();

    public void add(Component component) {
        components.add(component);
    }

    public void add(TableItem tableItem) {
        tableItems.add(tableItem);
    }

    public void add(GridViewItem gridViewItem) {
        gridViewItems.add(gridViewItem);
    }

    public void add(TreeItem treeItem) {
        treeItems.add(treeItem);
    }

    public void add(SAPTab tab) {
        tabs.add(tab);
    }


    public TextField? findTextField(Locator locator, GuiSession session) {
        return locator switch {
            HLabel(string label) => 
                components.findByLabel(label, GuiComponentType.GuiTextField, changeable: true)
                         ?.toTextField(session),
            HLabelVLabel(string hLabel, string vLabel) =>
                components.,
            TableLocator tableLocator =>
                tableItems.findTextField(tableLocator, changeable: true, session) ??
                gridViewItems.findTextField(tableLocator, changeable: true, session)
        };
    }

    public CheckBox? findCheckBox(Locator locator, GuiSession session) {
        return components.findCheckBox(locator, session) ??
               gridViewItems.findCheckBox(locator, session);
    }

    public Tab? findTab(string title, GuiSession session) {
        return tabs.findTab(title, session);
    }

    public ComboBox? findComboBox(string label, GuiSession session) {
        return comboBoxes.findComboBox(label, session);
    }
}


// store the information that SAP (ids, indices) and the user (text, position)
// need in order to identify an element

public record BoundingBox(int left, int right, int top, int bottom) {
    public bool isClosestHorizontalTo(BoundingBox other) {
        return false;
    }

    public bool isClosestVerticalTo(BoundingBox other) {
        return false;
    }

    public bool isContainedIn(BoundingBox other) {
        return false;
    }
}

// GuiLabel, GuiTextField, GuiCTextField, GuiPasswordField, GuiButton, GuiRadioButton, GuiCheckbox
public record Component(string id, GuiComponentType type, bool changeable, BoundingBox boundingBox, string text, List<string> labels) {
    public SAPTextField toTextField(GuiSession session) {
        return new SAPTextField(id, session);
    }

    public SAPLabel toLabel(GuiSession session) {
        return new SAPLabel(id, session);
    }

    public SAPRadioButton toRadioButton(GuiSession session) {
        return new SAPRadioButton(id, session);
    }

    public SAPCheckBox toCheckbox(GuiSession session) {
        return new SAPCheckBox(id, session);
    }

    public SAPButton toButton(GuiSession session) {
        return new SAPButton(id, session);
    }
}


// Parent: GuiTableControl
public record TableItem(   string tableId,    TableItemT type,    int rowIndex,   int colIndex,    bool changeable, string column, string text);

// Parent: GuiGridView
public record GridViewItem(string gridViewId, GridViewItemT type, int rowIndex,   string columnId, bool changeable, string column, string text);

// Parent: GuiTree
public record TreeItem(    string treeId,     TreeItemT type,     string nodeKey, string itemName, bool changeable, string column, string text, 
    List<string> labels);

// Parent: GuiToolbar, GuiGridViewToolbar
public record ToolbarItem(string toolbarId, int position, List<string> labels);

// Parent: GuiTabStrip
public record Tab(string id, string text);

// GuiBox
public record Box(string id, BoundingBox boundingBox, string text);

// GuiComboBox
public record ComboBoxRecord(string id, string label);

// GuiStatusbar: There is only one

// The objective is to design an API that guides the user. There should only be one way to use it correctly
// The API must be as DRY as possible and at the same time as simple as possible (the least amount of code and no clever tricks)
// When visiting the object tree of a window it should only be possible to add records to a database
// When a keyword is called it should only be possible to search for a record in the corresponding database
// What belongs where should be decided once in the whole program and in a central place
// The user should not need to decide where to store a record or where to look for it

#!csharp

var componentDB = new List<Component>();
var cellDB = new List<Cell>();

#!csharp

componentDB.Add(new Component(
    "/app/con[0]/ses[0]/wnd[0]/usr/lblYA0D8020-BESCHNR",
    Type.GuiLabel,
    false,
    new List<string>{"Bescheidnummer"}
));
componentDB.Add(new Component(
    "/app/con[0]/ses[0]/wnd[0]/usr/txtYA0D8020-BESCHNR",
    Type.GuiTextField,
    true,
    new List<string>{"Bescheidnummer", "Bescheidnummer allgemein"}
));

cellDB.Add(new Cell(
    "",
    0,
    2,
    "Betrag",
    false,
    new List<string>{"Betrag"}
));

cellDB.Add(new Cell(
    "",
    3,
    2,
    "Betrag",
    true,
    new List<string>{}
));

cellDB.Add(new Cell(
    "",
    3,
    1,
    "Beschreibung",
    false,
    new List<string>{"Baukosten"}
));

#!csharp

public class SAPTextField {
    string id;
    
    public SAPTextField(string id) {
        this.id = id;
    }

    public void fill(string content) {
        // Ask the session for the text field
        // Fill the text field
    }
}

public class SAPCell {
    string containerId;
    int rowIndex;
    int colIndex;
    string column;

    public SAPCell(string containerId, int rowIndex, int colIndex, string column) {
        this.containerId = containerId;
        this.rowIndex = rowIndex;
        this.colIndex = colIndex;
        this.column = column;
    }

    public void fill(string content) {
        // Get the container
        // Ask the container for the cell
        // Fill the cell
    }
}

#!csharp

// Abstraction -> The search has to return an object that can perform the action "fill"
// The user does not need to know the details: object type, api for changing the content of the element

var textField = 
from   component in componentDB
where  component.labels.Contains("Bescheidnummer")
where  component.changeable == true
select new SAPTextField(component.id);

#!csharp

textField.SingleOrDefault().fill("content")

#!csharp

var column =
from   cell in cellDB
where  cell.labels.Contains("Betrag")
select cell;

var row =
from   cell in cellDB
where  cell.labels.Contains("Baukosten")
select cell;

#!csharp

var emptyCell =
from   cell in cellDB
where  cell.rowIndex == row.SingleOrDefault()?.rowIndex
where  cell.column == column.SingleOrDefault()?.column
select cell;

#!csharp

emptyCell
